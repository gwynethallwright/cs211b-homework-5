% Select initial step sizes
h = 0.01;
% Select tolerance
tol = 1e-3;
% Select initial and final times
t_0 = 0;
t_f = 1;
t_f_2 = 100;
% Select initial condition for first problem
y_0 = transpose([1.0, 2.0]);
% Use FEM to get second initial condition for first problem
y_1 = forward_euler_step(y_0, h, t_0, @f_1);
% Select initial condition for second problem
u_0 = transpose([10.0, 10.0]);
% Use FEM to get second initial condition for second problem
u_1 = forward_euler_step(u_0, h, t_0, @f_2);
% Evolve and plot solutions
% The function evolve_ode returns the desired solution at all times 
% given the initial condition, start time, end time and initial step size
% PROBLEM 1
[y, t] = evolve_ode(h, t_0, t_f, y_0, y_1, @f_1, tol);
[u, t_2] = evolve_ode(h, t_0, t_f_2, u_0, u_1, @f_2, tol);
figure;
% Plot and format plot
plot(t_2, u(1,:));
hold on;
plot(t_2, u(2,:));
legend({'$y_1$','$y_2$'},'Interpreter', 'latex');
ax = gca;
ax.FontSize = 20;
xlabel('$t$', 'Interpreter', 'latex');
ylabel('$y$', 'Interpreter', 'latex');
title('Numerical Evolution of $y$', 'Interpreter', 'latex');
